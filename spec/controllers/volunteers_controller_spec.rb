require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe VolunteersController do
  login_user


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VolunteersController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  def valid_attributes
    {first_name: "Dan", last_name: "Hobin"}
  end

  describe "GET index" do
    it "assigns all volunteers as @volunteers" do
      volunteer = FactoryGirl.create(:volunteer)
      get :index, {}, valid_session
      assigns(:volunteers).should eq([volunteer])
    end
  end

  describe "GET show" do
    it "assigns the requested volunteer as @volunteer" do
      volunteer = FactoryGirl.create(:volunteer)
      get :show, {:id => volunteer.to_param}, valid_session
      assigns(:volunteer).should eq(volunteer)
    end
  end

  describe "GET new" do
    it "assigns a new volunteer as @volunteer" do
      get :new
      assigns(:volunteer).should be_a_new(Volunteer)
    end
  end

  describe "GET edit" do
    it "assigns the requested volunteer as @volunteer" do
      volunteer = FactoryGirl.create(:volunteer)
      get :edit, {:id => volunteer.to_param}
      assigns(:volunteer).should eq(volunteer)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Volunteer" do
        expect {
          post :create, {:volunteer => valid_attributes}
        }.to change(Volunteer, :count).by(1)
      end

      it "assigns a newly created volunteer as @volunteer" do
        post :create, {:volunteer => valid_attributes}
        assigns(:volunteer).should be_a(Volunteer)
        assigns(:volunteer).should be_persisted
      end

      it "redirects to the index" do
        post :create, {:volunteer => valid_attributes}
        response.should redirect_to(:controller => :volunteers, :action => :index)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved volunteer as @volunteer" do
        Volunteer.any_instance.stub(:save).and_return(false)
        post :create, {:volunteer => {}}
        assigns(:volunteer).should be_a_new(Volunteer)
      end

      it "re-renders the 'new' template" do
        Volunteer.any_instance.stub(:save).and_return(false)
        post :create, {:volunteer => {}}
        response.should redirect_to volunteers_path
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested volunteer" do
        volunteer = FactoryGirl.create(:volunteer)
        Volunteer.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => volunteer.to_param, :volunteer => {'these' => 'params'}}
      end

      it "assigns the requested volunteer as @volunteer" do
        volunteer = FactoryGirl.create(:volunteer)
        put :update, {:id => volunteer.to_param, :volunteer => valid_attributes}
        assigns(:volunteer).should eq(volunteer)
      end

      it "redirects to the volunteer" do
        volunteer = FactoryGirl.create(:volunteer)
        put :update, {:id => volunteer.to_param, :volunteer => valid_attributes}
        response.should redirect_to(volunteer)
      end
    end

    describe "with invalid params" do
      it "assigns the volunteer as @volunteer" do
        volunteer = FactoryGirl.create(:volunteer)
        # Trigger the behavior that occurs when invalid params are submitted
        Volunteer.any_instance.stub(:save).and_return(false)
        put :update, {:id => volunteer.to_param, :volunteer => {}}
        assigns(:volunteer).should eq(volunteer)
      end

      it "re-renders the 'edit' template" do
        volunteer = FactoryGirl.create(:volunteer)
        # Trigger the behavior that occurs when invalid params are submitted
        Volunteer.any_instance.stub(:save).and_return(false)
        put :update, {:id => volunteer.to_param, :volunteer => {}}
        response.should redirect_to volunteer_path
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested volunteer" do
      volunteer = FactoryGirl.create(:volunteer)
      expect {
        delete :destroy, {:id => volunteer.to_param}
      }.to change(Volunteer, :count).by(-1)
    end

    it "redirects to the volunteers list" do
      volunteer = FactoryGirl.create(:volunteer)
      delete :destroy, {:id => volunteer.to_param}
      response.should redirect_to(volunteers_url)
    end
  end

end
